import asyncio
import httpx
import sys
import os
import json
import traceback
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich.box import ASCII2
from rich.text import Text
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type

from .config_helper import ConfigHelper
from .oauth_helper import OAuthHelper
from .downloading_graphics_from_descriptions_helper import ImageProcessor

class CategoriesDownloadHelper:
    def __init__(self, session: httpx.AsyncClient, config: ConfigHelper):
        self.session = session
        self.config = config
        self.config.create_directories()
        self.oauth_helper = OAuthHelper()
        self.max_per_page = 100
        self.batch_size = 50
        
        # Inicjalizacja ImageProcessor z odpowiednimi argumentami
        base_api_url = config.WOOCOMMERCE_API_DOMAIN if config.WOOCOMMERCE_API_DOMAIN.startswith('http') else f"https://{config.WOOCOMMERCE_API_DOMAIN}"
        dir_path = config.DIR_PATH  # g≈Ç√≥wny katalog projektu
        self.image_processor = ImageProcessor(config)  
        
        # Dodaj w≈Ça≈õciwo≈õƒá ≈õcie≈ºki do pliku
        self.excluded_attributes_path = os.path.join(dir_path, 'data', 'output', 'json', 'categories', 'exclude_category_attributes.json')
        
        # DEBUG
        print(f"Konstruktor: Przed za≈Çadowaniem wykluczonych atrybut√≥w")
        self.excluded_attributes = self.load_excluded_attributes()  
        # DEBUG
        print(f"Za≈Çadowane wykluczone atrybuty: {self.excluded_attributes}")

    def wybor_trybu_pobierania_kategorii(self):
        console = Console()

        def custom_prompt():
            prompt_text = "[black on yellow] Podaj numer trybu [/black on yellow] "
            while True:
                opcja = Prompt.ask(prompt_text)
                if opcja.isdigit() and 0 <= int(opcja) <= 4:
                    return int(opcja)
                else:
                    console.print("‚ñ£ Nieprawid≈Çowy wyb√≥r, spr√≥buj ponownie:exclamation:\n", style="bold red")

        operacje = {
            1: "Wszystkie kategorie",
            2: "Wszystkie kategorie, z pominiƒôciem tych o podanych identyfikatorach",
            3: "Wybrane kategorie, na podstawie podanych identyfikator√≥w",
            4: "WybranƒÖ kategoriƒô, do kt√≥rej przypisany jest towar o podanym identyfikatorze",
            0: "Wyjd≈∫"
        }

        menu_text = ""
        last_key = list(operacje.keys())[-1]  # Pobierz ostatni klucz w s≈Çowniku
        for key, value in operacje.items():
            if key == last_key:
                menu_text += f"[bold yellow]{key}.[/bold yellow] {value}"  # Nie dodawaj \n dla ostatniego elementu
            else:
                menu_text += f"[bold yellow]{key}.[/bold yellow] {value}\n"            

        panel = Panel(menu_text, title="Wybierz odpowiedni tryb z poni≈ºszej listy, wprowadzajƒÖc jego numer i zatwierdzajƒÖc wyb√≥r klawiszem Enter:", title_align='left', subtitle="WDI Team", subtitle_align='right', padding=(0, 1), width=112, box=ASCII2)
        console.print(panel)

        tryb_pobierania_kategorii = custom_prompt()
        nazwa_trybu = operacje.get(tryb_pobierania_kategorii, "Nieznana operacja")  # Pobierz nazwƒô operacji na podstawie wybranej opcji
    
        console.print(
            f"[black on green] Wybrano [/black on green] : {nazwa_trybu}\n"  # Wy≈õwietl nazwƒô operacji
        )
            

        if tryb_pobierania_kategorii == 0:
            console.print("üëä Ko≈Ñczymy na dzi≈õ. Opuszczasz Matrixa. Do zobaczenia wkr√≥tce üëä", style="bold yellow")
            sys.exit(0)
            
        elif tryb_pobierania_kategorii == 1:
            endpoint = f"{self.config.WOOCOMMERCE_API_CATEGORIES_GATE_URL}?orderby=id&order=asc&per_page={self.max_per_page}"
            
        elif tryb_pobierania_kategorii == 2:
            console.print("[bold cyan]Podaj identyfikatory kategorii do pominiƒôcia, oddzielone przecinkami:[/bold cyan]", end=" ")
            exclude_ids_str = input()
            exclude_ids = exclude_ids_str.split(",")
            # Usuniƒôcie niepotrzebnych spacji przed i po przecinkach, a nastƒôpnie podzia≈Ç ciƒÖgu znak√≥w na listƒô identyfikator√≥w.
            exclude_ids = [id.strip() for id in exclude_ids_str.split(",")]
            # Konwersja wprowadzonych warto≈õci na liczby ca≈Çkowite, przy za≈Ço≈ºeniu, ≈ºe wszystkie sƒÖ poprawnymi liczbami.
            self.exclude_ids = [int(id) for id in exclude_ids if id.isdigit()]

            # Aktualizacja self.category_id_str
            self.category_id_str = ",".join(map(str, self.exclude_ids))
            
            endpoint = f"{self.config.WOOCOMMERCE_API_CATEGORIES_GATE_URL}?orderby=id&order=asc&exclude={self.category_id_str}&per_page={self.max_per_page}"
            
        elif tryb_pobierania_kategorii == 3:
            console.print("[bold cyan]Podaj identyfikatory kategorii do pobrania, oddzielone przecinkami:[/bold cyan]", end=" ")
            include_ids_str = input()
            # Usuwamy bia≈Çe znaki dla ka≈ºdego identyfikatora oraz dzielimy ciƒÖg na podstawie przecink√≥w.
            include_ids = [id.strip() for id in include_ids_str.split(",")]
            # Filtrujemy i konwertujemy tylko te identyfikatory, kt√≥re sƒÖ cyframi.
            self.include_ids = [int(id) for id in include_ids if id.isdigit()]

            # Aktualizacja self.ids_str do przechowywania identyfikator√≥w jako ciƒÖgu znak√≥w oddzielonych przecinkami.
            self.ids_str = ",".join(map(str, self.include_ids))
            
            endpoint = f"{self.config.WOOCOMMERCE_API_CATEGORIES_GATE_URL}?orderby=id&order=asc&include={self.ids_str}&per_page={self.max_per_page}"
            
        elif tryb_pobierania_kategorii == 4:
            console.print("[bold cyan]Podaj identyfikator towaru, dla kt√≥rego ma byƒá pobrana kategoria:[/bold cyan]", end=" ")
            product_id_str = input()
            self.product_id = int(product_id_str.strip()) if product_id_str.strip().isdigit() else None
            
            endpoint = f"{self.config.WOOCOMMERCE_API_CATEGORIES_GATE_URL}?product={self.product_id}&per_page={self.max_per_page}"
        else:
            console.print("‚ñ£ Nieprawid≈Çowy wyb√≥r, spr√≥buj ponownie:exclamation:\n", style="bold red")
            return     
            
        return endpoint

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((httpx.ReadTimeout, httpx.ConnectError))
    )
    async def obliczanie_liczby_kategorii_i_stron_odpowiedzi_api(self, endpoint):
        console = Console()
        
        status_message = "Obliczanie liczby kategorii do pobrania"
        
        with console.status(f"[bold cyan]{status_message}[/bold cyan]", spinner="dots6", spinner_style="bold cyan", speed=1.0) as status:
            oauth_path = self.oauth_helper.generate_oauth_url("HEAD", endpoint, self.config.WOOCOMMERCE_API_CONSUMER_KEY, self.config.WOOCOMMERCE_API_CONSUMER_SECRET_KEY)
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.head(oauth_path)

                    if response.status_code == 200:
                        x_wp_total = response.headers.get('X-WP-Total')
                        x_wp_totalpages = response.headers.get('X-WP-TotalPages')

                        if x_wp_total is not None and x_wp_totalpages is not None:
                            total_categories = int(x_wp_total)
                            total_categories_pages = int(x_wp_totalpages)
                            
                            strony_text = self.odmien_rzeczownik(total_categories_pages, "strona")
                            kategorie_text = self.odmien_rzeczownik(total_categories, "kategoria")
                            
                            console.print(
                                f"‚≠ê",
                                f"Do pobrania jest ≈ÇƒÖcznie [bold bright_blue]{total_categories}[/bold bright_blue] {kategorie_text},", 
                                f"kt√≥re zosta≈Çy podzielone na [bold bright_blue]{total_categories_pages}[/bold bright_blue] {strony_text} odpowiedzi.",
                                style="bold green"
                            )                                                     
                            
                            return total_categories, total_categories_pages
                        else:
                            status.stop()
                            console.print("[bold red]‚ñ£[/bold red] Nie znaleziono oczekiwanych nag≈Ç√≥wk√≥w 'X-WP-Total' i 'X-WP-TotalPages' w odpowiedzi", style="bold red")
                            return None, None
                    else:
                        status.stop()
                        console.print(f"[bold red]‚ñ£[/bold red] Status [red]{response.status_code}[/red] : Nie uda≈Ço siƒô poprawnie po≈ÇƒÖczyƒá i pobieraƒá nag≈Ç√≥wk√≥w z [bold cyan]{endpoint}[/bold cyan]", style="bold red")
                        self._display_error_message(error_message)
                        return None, None 
            
            except httpx.ReadTimeout:
                status.stop()
                error_message = "‚ñ£ Up≈ÇynƒÖ≈Ç limit czasu oczekiwania na odpowied≈∫ serwera. Sprawd≈∫ swoje po≈ÇƒÖczenie internetowe i spr√≥buj ponownie p√≥≈∫niej."
                self._display_error_message(error_message)
                return None, None
            except httpx.ConnectError:
                status.stop()
                error_message = "‚ñ£ Nie mo≈ºna nawiƒÖzaƒá po≈ÇƒÖczenia z serwerem. Sprawd≈∫ swoje po≈ÇƒÖczenie internetowe i upewnij siƒô, ≈ºe serwer jest dostƒôpny."
                self._display_error_message(error_message)
                return None, None
            except Exception as e:
                status.stop()
                error_message = f"‚ñ£ WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd: {str(e)}"
                self._display_error_message(error_message)
                return None, None
      
    
    def _display_error_message(self, message):
        console = Console()
        error_panel = Panel(
            Text(message, style="bold red"),
            title="B≈ÇƒÖd po≈ÇƒÖczenia",
            title_align='left', 
            subtitle="WDI Team", 
            subtitle_align='right', 
            padding=(0, 1), 
            width=112,
            border_style="red",
            expand=False, 
            box=ASCII2
        )
        console.print(error_panel)    
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((httpx.ReadTimeout, httpx.ConnectError))
    )
    async def pobieranie_wszystkich_kategorii(self, endpoint):
        console = Console()
        try: 
            total_categories, total_categories_pages = await self.obliczanie_liczby_kategorii_i_stron_odpowiedzi_api(endpoint)      
            if total_categories_pages is None:
                console.print("Nie uda≈Ço siƒô pobraƒá informacji o liczbie kategorii.", style="bold red")
                return []        
            
            all_categories = []
            
            page = 1
            while page <= total_categories_pages:
                current_batch_pages = min(self.batch_size, total_categories_pages - page + 1)
                current_batch_pages_start = page
                current_batch_pages_end = page + current_batch_pages - 1
                strony_text2 = self.odmien_rzeczownik(total_categories_pages, "strona2")
                current_page_message = f"[bold cyan]Trwa pobieranie szczeg√≥≈Çowych danych dotyczƒÖcych kategorii z zakresu stron od [bold yellow]{current_batch_pages_start}[/bold yellow] do [bold yellow]{current_batch_pages_end}[/bold yellow] z ca≈Çkowitej liczby [bold yellow]{total_categories_pages}[/bold yellow] {strony_text2}.[/bold cyan]"  
                
                with console.status(current_page_message, spinner="dots6", spinner_style="bold yellow", speed=1.0):
                    start_time = asyncio.get_event_loop().time()
                    
                    tasks = [self.pobieranie_paczki_z_kategoriami(page + i, endpoint) for i in range(current_batch_pages)]
                    categories_batches = await asyncio.gather(*tasks)
                    
                    batch_categories_count = sum(len(batch) for batch in categories_batches)
                    all_categories.extend([cat for batch in categories_batches for cat in batch])
                    
                    elapsed_time = asyncio.get_event_loop().time() - start_time
                    
                    console.print(
                        f"‚≠ê",
                        f"Przetworzono kategorie ze stron od [bold bright_blue]{current_batch_pages_start}[/bold bright_blue] do [bold bright_blue]{current_batch_pages_end}[/bold bright_blue] z ≈ÇƒÖcznej liczby [bold bright_blue]{total_categories_pages}[/bold bright_blue] {strony_text2}.",
                        f"Uzyskano dane dotyczƒÖce [bold bright_blue]{batch_categories_count}[/bold bright_blue] kategorii z ≈ÇƒÖcznej liczby [bold bright_blue]{len(all_categories)}[/bold bright_blue] kategorii (czas wykonania operacji wyni√≥s≈Ç [bold bright_blue]{elapsed_time:.2f}[/bold bright_blue] sekundy).",
                        style="bold green"
                    )                   
                    
                    page += current_batch_pages
            
            # Liczenie unikalnych kategorii
            unique_categories = set(cat['id'] for cat in all_categories)
            # console.print(f"Ca≈Çkowita liczba pobranych unikalnych kategorii: [bold bright_blue]{len(unique_categories)}[/bold bright_blue]")
            
            # Sprawdzenie duplikat√≥w
            if len(unique_categories) != len(all_categories):
                console.print(f"[bold yellow]Uwaga:[/bold yellow] Wykryto [bold red]{len(all_categories) - len(unique_categories)}[/bold red] zduplikowanych kategorii.", style="bold yellow")
                
                # Opcjonalnie: Wy≈õwietl informacje o duplikatach
                category_counts = {}
                for cat in all_categories:
                    category_counts[cat['id']] = category_counts.get(cat['id'], 0) + 1
                duplicates = {id: count for id, count in category_counts.items() if count > 1}
                if duplicates:
                    console.print("Zduplikowane kategorie:")
                    for id, count in duplicates.items():
                        console.print(f"  Kategoria ID {id}: powt√≥rzona {count} razy")

            # Sprawdzenie zgodno≈õci z poczƒÖtkowymi danymi
            if total_categories != len(unique_categories):
                console.print(f"[bold yellow]Uwaga:[/bold yellow] Liczba pobranych unikalnych kategorii ([bold red]{len(unique_categories)}[/bold red]) nie zgadza siƒô z poczƒÖtkowƒÖ liczbƒÖ kategorii ([bold red]{total_categories}[/bold red]).", style="bold yellow")

            return all_categories    
        except httpx.ReadTimeout:
            console.print("WystƒÖpi≈Ç b≈ÇƒÖd timeout podczas pobierania kategorii. Spr√≥buj ponownie p√≥≈∫niej.", style="bold red")
            return []
        except Exception as e:
            console.print(f"WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd podczas pobierania kategorii: {str(e)}", style="bold red")
            return []        

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((httpx.ReadTimeout, httpx.ConnectError))
    )
    async def pobieranie_paczki_z_kategoriami(self, page, endpoint):
        console = Console()
        # Dodajemy parametr page do endpointa
        if '?' in endpoint:
            paginated_endpoint = f"{endpoint}&page={page}"
        else:
            paginated_endpoint = f"{endpoint}?page={page}"
    
        # DEBUG
        # console.log(f"Wywo≈Çywany endpoint URL: {paginated_endpoint}")
        oauth_path = OAuthHelper.generate_oauth_url("GET", paginated_endpoint, self.config.WOOCOMMERCE_API_CONSUMER_KEY, self.config.WOOCOMMERCE_API_CONSUMER_SECRET_KEY)
    
        async with httpx.AsyncClient() as client:
            response = await client.get(oauth_path)
            if response.status_code == 200:
                categories_batch = response.json()
            
                # DEBUG
                # console.print(f"Pobrano {len(categories_batch)} kategorii ze strony {page}")
            
                if not categories_batch:
                    return []
                
                return categories_batch
            else:
                console.print(f"B≈ÇƒÖd przy pobieraniu kategorii: Status {response.status_code}, Odpowied≈∫: {response.text}", style="bold red")
                return []

    def odmien_rzeczownik(self, liczba, typ):
        """
        Funkcja odmienia rzeczownik w zale≈ºno≈õci od podanej liczby i typu rzeczownika.

        Args:
        liczba (int): Liczba, kt√≥ra ma byƒá odmieniona.
        typ (str): Typ rzeczownika, kt√≥ry ma byƒá odmieniony. Mo≈ºe byƒá jednym z:
                   'strona', 'strona2', 'kategoria', 'tlumaczenie'.

        Returns:
        str: Odmieniony rzeczownik w odpowiedniej formie.

        Raises:
        ValueError: Je≈õli podano nieznany typ rzeczownika.
        """
        liczba = abs(liczba)  # zabezpieczenie przed liczbami ujemnymi
        ostatnie_dwie_cyfry = liczba % 100
        ostatnia_cyfra = liczba % 10

        if typ == "strona":
            # Odmiana dla rzeczownika "strona"
            if liczba == 1:
                return "stronƒô"
            elif 11 <= ostatnie_dwie_cyfry <= 19:
                return "stron"
            elif ostatnia_cyfra == 1:
                return "stron"
            elif 2 <= ostatnia_cyfra <= 4:
                return "strony"
            else:
                return "stron"

        elif typ == "strona2":
            # Odmiana dla rzeczownika "strona" w innej formie
            if liczba == 1:
                return "strony"
            else:
                return "stron"

        elif typ == "kategoria":
            # Odmiana dla rzeczownika "kategoria"
            if liczba == 1:
                return "kategoria"
            elif 11 <= ostatnie_dwie_cyfry <= 19:
                return "kategorii"
            elif ostatnia_cyfra == 1:
                return "kategorii"
            elif 2 <= ostatnia_cyfra <= 4 and not (11 <= ostatnie_dwie_cyfry <= 14):
                return "kategorie"
            else:
                return "kategorii"

        elif typ == "tlumaczenie":
            # Odmiana dla rzeczownika "tlumaczenie"
            if liczba == 1:
                return "jednego t≈Çumaczenia"
            else:
                return "t≈Çumacze≈Ñ"

        else:
            # Rzucenie wyjƒÖtku w przypadku nieznanego typu rzeczownika
            raise ValueError("Nieznany typ rzeczownika")
   
    def load_excluded_attributes(self):
        """
        ≈Åaduje atrybuty wykluczone z pliku JSON.
        """
        print(f"Bie≈ºƒÖcy katalog roboczy: {os.getcwd()}")  # Dodaj ten wiersz, aby sprawdziƒá bie≈ºƒÖcy katalog roboczy
        print(f"≈öcie≈ºka do pliku: {self.excluded_attributes_path}")  # Dodaj ten wiersz, aby sprawdziƒá pe≈ÇnƒÖ ≈õcie≈ºkƒô do pliku
        
        try:
            with open(self.excluded_attributes_path, 'r') as file:
                excluded_attributes = json.load(file)
            return excluded_attributes
        except FileNotFoundError:
            print(f"Plik {self.excluded_attributes_path} nie zosta≈Ç znaleziony. U≈ºywam pustego s≈Çownika.")
            return {}
        except json.JSONDecodeError:
            print(f"Plik {self.excluded_attributes_path} zawiera niepoprawny format JSON. U≈ºywam pustego s≈Çownika.")
            return {}
              
    def exclude_category_attributes(self, category_data):
        """
        Usuwa okre≈õlone atrybuty z danych kategorii na podstawie zdefiniowanych regu≈Ç.

        Ta funkcja przetwarza dane kategorii, usuwajƒÖc niechciane atrybuty zgodnie z regu≈Çami 
        zdefiniowanymi w EXCLUDED_CATEGORIES_ATTRIBUTES. Obs≈Çuguje zar√≥wno p≈Çaskie jak i zagnie≈ºd≈ºone struktury danych.

        Args:
            category_data (dict): Dane kategorii do przetworzenia.

        Returns:
            dict: Oczyszczone dane kategorii.
        """          
        if not hasattr(self, 'excluded_attributes') or not self.excluded_attributes:
            print("Ostrze≈ºenie: excluded_attributes nie jest zdefiniowane lub jest puste.")
            return category_data

        def exclude_attributes(data, excluded_info):
            """
            Pomocnicza funkcja do usuwania atrybut√≥w z listy lub s≈Çownika.
            Args:
                data (list or dict): Dane do przetworzenia.
                excluded_info (dict or list): Informacje o atrybutach do usuniƒôcia.
            Returns:
                list or dict: Oczyszczone dane.
            """            
        
            if isinstance(data, list):
                # Usuwanie element√≥w listy na podstawie indeks√≥w
                if 'delete_item_index' in excluded_info:
                    indices_to_delete = excluded_info['delete_item_index']
                    if isinstance(indices_to_delete, int):
                        indices_to_delete = [indices_to_delete]
                    remaining_items = [item for i, item in enumerate(data) if i not in indices_to_delete]
                    # Usuwanie atrybut√≥w z pozosta≈Çych element√≥w listy
                    if 'exclude_attributes' in excluded_info:
                        for item in remaining_items:
                            for excluded_key in excluded_info['exclude_attributes']:
                                item.pop(excluded_key, None)
                    return remaining_items
            elif isinstance(data, dict):
                # Usuwanie atrybut√≥w z obiekt√≥w s≈Çownikowych
                if isinstance(excluded_info, list):  # Sprawdzenie, czy excluded_info to lista
                    for excluded_key in excluded_info:
                        data.pop(excluded_key, None)
            return data

        # Usuwanie og√≥lnych atrybut√≥w
        cleaned_category_data = {key: value for key, value in category_data.items() if key not in self.excluded_attributes.get('general', [])}
        
        # Usuwanie zagnie≈ºd≈ºonych atrybut√≥w
        for key, excluded_info in self.excluded_attributes.items():
            if key != 'general':
                key_parts = key.split('.')
                sub_data = category_data
                try:
                    # Iteracja przez zagnie≈ºd≈ºone klucze, z wyjƒÖtkiem ostatniego
                    for part in key_parts[:-1]:
                        sub_data = sub_data[part]
                    last_key = key_parts[-1]
                    sub_data[last_key] = exclude_attributes(sub_data[last_key], excluded_info)
                except (KeyError, IndexError):
                    pass
        
        return cleaned_category_data
